using System;

namespace Ventura
{
    /// <summary>
    /// Indicates type of entropy sources used to 
    /// reseed the generator. 
    /// Local: only sources from the local system used
    /// Remote: only remote sources (e.g RemoteQUantumRngExtractor) used. 
    /// Full: both types used
    /// </summary>
    public enum ReseedEntropySourceGroup
    {
        Local,
        Remote,
        Full 
    }

    public enum Cipher
    {
        Aes,
        TwoFish,
        BlowFish,
        Serpent
    }

    public class Constants
    {
        /// <summary>
        /// 256-bit key size
        /// </summary>
        public const int KeyBlockSize = 32; 

        /// <summary>
        /// Size of each cipher block generated by the encryptor
        /// 128 bits according to spec
        /// </summary>
        public const int CipherBlockSize = 16; 

        /// <summary>
        /// Maximum amount of pseudorandom data generated
        /// before the state key changes
        /// </summary>
        public const int MaximumRequestSizeForStateKey = 1048576;

        public const int SeedFileSize = 64;

        /// <summary>
        /// Maximum amount of entropy data in bytes
        /// </summary>
        public const int MaximumEventSize = 32;

        /// <summary>
        /// The spec suggests a minimum of 128 bits of entropic data
        /// is needed for an attacker to lose track of the generator state.
        /// We set it to 256 bits (32 bytes) which means each pool should contain the concatenated hash
        /// of a minimum of two events before a reseed is triggered.
        /// </summary>
        public const int MinimumPoolSize = 32;

        public const int MaximumNumberOfSources = 255;
        public const int MaximumNumberOfPools = 32;
        public const int MaximumSeedSize = MaximumNumberOfPools * MinimumPoolSize;

		/// <summary>
		/// Accoding to the spec, a minimum number of blocks is neede 
		/// to generate a new key
		/// </summary>
		public const int NumberOfBlocksForNewKey = 2;

		/// <summary>
		/// Used to limit the rate of reseeds according to spec (ten per second)
		/// </summary>
		public static readonly TimeSpan MaximumTimeSpanBetweenReseeds = TimeSpan.FromMilliseconds(100);

		public static readonly TimeSpan SeedUpdateInterval = TimeSpan.FromMinutes(10);
	}
}
